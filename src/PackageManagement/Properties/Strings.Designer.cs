// <auto-generated />
namespace NuGet.PackageManagement
{
    using System.Globalization;
    using System.Reflection;
    using System.Resources;

    internal static class Strings
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("PackageManagement.Strings", typeof(Strings).GetTypeInfo().Assembly);

        /// <summary>
        /// Another NuGetProject with the same name '{0}' exists in solution
        /// </summary>
        internal static string AnotherNuGetProjectWithSameNameExistsInSolution
        {
            get { return GetString("AnotherNuGetProjectWithSameNameExistsInSolution"); }
        }

        /// <summary>
        /// Another NuGetProject with the same name '{0}' exists in solution
        /// </summary>
        internal static string FormatAnotherNuGetProjectWithSameNameExistsInSolution(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("AnotherNuGetProjectWithSameNameExistsInSolution"), p0);
        }

        /// <summary>
        /// Attempting to gather dependencies information for package '{0}' with respect to project '{1}', targeting '{2}'
        /// </summary>
        internal static string AttemptingToGatherDependencyInfo
        {
            get { return GetString("AttemptingToGatherDependencyInfo"); }
        }

        /// <summary>
        /// Attempting to gather dependencies information for package '{0}' with respect to project '{1}', targeting '{2}'
        /// </summary>
        internal static string FormatAttemptingToGatherDependencyInfo(object p0, object p1, object p2)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("AttemptingToGatherDependencyInfo"), p0, p1, p2);
        }

        /// <summary>
        /// Attempting to resolve dependencies for package '{0}' with DependencyBehavior '{1}'
        /// </summary>
        internal static string AttemptingToResolveDependencies
        {
            get { return GetString("AttemptingToResolveDependencies"); }
        }

        /// <summary>
        /// Attempting to resolve dependencies for package '{0}' with DependencyBehavior '{1}'
        /// </summary>
        internal static string FormatAttemptingToResolveDependencies(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("AttemptingToResolveDependencies"), p0, p1);
        }

        /// <summary>
        /// Installed package '{0}' to project
        /// </summary>
        internal static string InstalledPackage
        {
            get { return GetString("InstalledPackage"); }
        }

        /// <summary>
        /// Installed package '{0}' to project
        /// </summary>
        internal static string FormatInstalledPackage(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InstalledPackage"), p0);
        }

        /// <summary>
        /// Installing package '{0}' to project
        /// </summary>
        internal static string InstallingPackage
        {
            get { return GetString("InstallingPackage"); }
        }

        /// <summary>
        /// Installing package '{0}' to project
        /// </summary>
        internal static string FormatInstallingPackage(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InstallingPackage"), p0);
        }

        /// <summary>
        /// '{0}' cannot be called on a NullSettings. This may be caused on account of insufficient permissions to read or write to '%AppData%\NuGet\NuGet.config'
        /// </summary>
        internal static string InvalidNullSettingsOperation
        {
            get { return GetString("InvalidNullSettingsOperation"); }
        }

        /// <summary>
        /// '{0}' cannot be called on a NullSettings. This may be caused on account of insufficient permissions to read or write to '%AppData%\NuGet\NuGet.config'
        /// </summary>
        internal static string FormatInvalidNullSettingsOperation(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InvalidNullSettingsOperation"), p0);
        }

        /// <summary>
        /// When updating multiple packages, dependency behavior has to be DependencyBehavior.Highest
        /// </summary>
        internal static string MultiplePackageInstallOrUpdateHasToBeAnUpdate
        {
            get { return GetString("MultiplePackageInstallOrUpdateHasToBeAnUpdate"); }
        }

        /// <summary>
        /// When updating multiple packages, dependency behavior has to be DependencyBehavior.Highest
        /// </summary>
        internal static string FormatMultiplePackageInstallOrUpdateHasToBeAnUpdate()
        {
            return GetString("MultiplePackageInstallOrUpdateHasToBeAnUpdate");
        }

        /// <summary>
        /// No latest version found for the '{0}' for the given source repositories and resolution context
        /// </summary>
        internal static string NoLatestVersionFound
        {
            get { return GetString("NoLatestVersionFound"); }
        }

        /// <summary>
        /// No latest version found for the '{0}' for the given source repositories and resolution context
        /// </summary>
        internal static string FormatNoLatestVersionFound(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("NoLatestVersionFound"), p0);
        }

        /// <summary>
        /// No NuGetProject is available with specified name '{0}'
        /// </summary>
        internal static string NoNuGetProjectWithSpecifiedName
        {
            get { return GetString("NoNuGetProjectWithSpecifiedName"); }
        }

        /// <summary>
        /// No NuGetProject is available with specified name '{0}'
        /// </summary>
        internal static string FormatNoNuGetProjectWithSpecifiedName(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("NoNuGetProjectWithSpecifiedName"), p0);
        }

        /// <summary>
        /// NuGetProject does not have 'Name' set in metadata. It should be set and it should be unique
        /// </summary>
        internal static string NuGetProjectDoesNotHaveName
        {
            get { return GetString("NuGetProjectDoesNotHaveName"); }
        }

        /// <summary>
        /// NuGetProject does not have 'Name' set in metadata. It should be set and it should be unique
        /// </summary>
        internal static string FormatNuGetProjectDoesNotHaveName()
        {
            return GetString("NuGetProjectDoesNotHaveName");
        }

        /// <summary>
        /// Package '{0}' could not be installed
        /// </summary>
        internal static string PackageCouldNotBeInstalled
        {
            get { return GetString("PackageCouldNotBeInstalled"); }
        }

        /// <summary>
        /// Package '{0}' could not be installed
        /// </summary>
        internal static string FormatPackageCouldNotBeInstalled(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("PackageCouldNotBeInstalled"), p0);
        }

        /// <summary>
        /// Unable to uninstall '{0}' because '{1}' depends on it.
        /// </summary>
        internal static string PackageHasDependent
        {
            get { return GetString("PackageHasDependent"); }
        }

        /// <summary>
        /// Unable to uninstall '{0}' because '{1}' depends on it.
        /// </summary>
        internal static string FormatPackageHasDependent(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("PackageHasDependent"), p0, p1);
        }

        /// <summary>
        /// Unable to uninstall '{0}' because '{1}' depend on it.
        /// </summary>
        internal static string PackageHasDependents
        {
            get { return GetString("PackageHasDependents"); }
        }

        /// <summary>
        /// Unable to uninstall '{0}' because '{1}' depend on it.
        /// </summary>
        internal static string FormatPackageHasDependents(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("PackageHasDependents"), p0, p1);
        }

        /// <summary>
        /// Package '{0}' is not found
        /// </summary>
        internal static string PackageNotFound
        {
            get { return GetString("PackageNotFound"); }
        }

        /// <summary>
        /// Package '{0}' is not found
        /// </summary>
        internal static string FormatPackageNotFound(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("PackageNotFound"), p0);
        }

        /// <summary>
        /// Packages could not be installed
        /// </summary>
        internal static string PackagesCouldNotBeInstalled
        {
            get { return GetString("PackagesCouldNotBeInstalled"); }
        }

        /// <summary>
        /// Packages could not be installed
        /// </summary>
        internal static string FormatPackagesCouldNotBeInstalled()
        {
            return GetString("PackagesCouldNotBeInstalled");
        }

        /// <summary>
        /// Package '{0}' to be uninstalled could not be found in project '{1}'
        /// </summary>
        internal static string PackageToBeUninstalledCouldNotBeFound
        {
            get { return GetString("PackageToBeUninstalledCouldNotBeFound"); }
        }

        /// <summary>
        /// Package '{0}' to be uninstalled could not be found in project '{1}'
        /// </summary>
        internal static string FormatPackageToBeUninstalledCouldNotBeFound(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("PackageToBeUninstalledCouldNotBeFound"), p0, p1);
        }

        /// <summary>
        /// Resolved actions to install package '{0}'
        /// </summary>
        internal static string ResolvedActionsToInstallPackage
        {
            get { return GetString("ResolvedActionsToInstallPackage"); }
        }

        /// <summary>
        /// Resolved actions to install package '{0}'
        /// </summary>
        internal static string FormatResolvedActionsToInstallPackage(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ResolvedActionsToInstallPackage"), p0);
        }

        /// <summary>
        /// Resolved actions to uninstall package '{0}'
        /// </summary>
        internal static string ResolvedActionsToUninstallPackage
        {
            get { return GetString("ResolvedActionsToUninstallPackage"); }
        }

        /// <summary>
        /// Resolved actions to uninstall package '{0}'
        /// </summary>
        internal static string FormatResolvedActionsToUninstallPackage(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ResolvedActionsToUninstallPackage"), p0);
        }

        /// <summary>
        /// Resolving actions to install package '{0}'
        /// </summary>
        internal static string ResolvingActionsToInstallPackage
        {
            get { return GetString("ResolvingActionsToInstallPackage"); }
        }

        /// <summary>
        /// Resolving actions to install package '{0}'
        /// </summary>
        internal static string FormatResolvingActionsToInstallPackage(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ResolvingActionsToInstallPackage"), p0);
        }

        /// <summary>
        /// Resolving actions to uninstall package '{0}'
        /// </summary>
        internal static string ResolvingActionsToUninstallPackage
        {
            get { return GetString("ResolvingActionsToUninstallPackage"); }
        }

        /// <summary>
        /// Resolving actions to uninstall package '{0}'
        /// </summary>
        internal static string FormatResolvingActionsToUninstallPackage(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ResolvingActionsToUninstallPackage"), p0);
        }

        /// <summary>
        /// Restoring NuGet package {0}.
        /// </summary>
        internal static string RestoringPackage
        {
            get { return GetString("RestoringPackage"); }
        }

        /// <summary>
        /// Restoring NuGet package {0}.
        /// </summary>
        internal static string FormatRestoringPackage(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("RestoringPackage"), p0);
        }

        /// <summary>
        /// Solution is not opened or not saved. Please ensure you have an open and saved solution.
        /// </summary>
        internal static string SolutionDirectoryNotAvailable
        {
            get { return GetString("SolutionDirectoryNotAvailable"); }
        }

        /// <summary>
        /// Solution is not opened or not saved. Please ensure you have an open and saved solution.
        /// </summary>
        internal static string FormatSolutionDirectoryNotAvailable()
        {
            return GetString("SolutionDirectoryNotAvailable");
        }

        /// <summary>
        /// Uninstall is not supported when SolutionManager is not available
        /// </summary>
        internal static string SolutionManagerNotAvailableForUninstall
        {
            get { return GetString("SolutionManagerNotAvailableForUninstall"); }
        }

        /// <summary>
        /// Uninstall is not supported when SolutionManager is not available
        /// </summary>
        internal static string FormatSolutionManagerNotAvailableForUninstall()
        {
            return GetString("SolutionManagerNotAvailableForUninstall");
        }

        /// <summary>
        /// Unable to gather dependencies information for package '{0}'
        /// </summary>
        internal static string UnableToGatherDependencyInfo
        {
            get { return GetString("UnableToGatherDependencyInfo"); }
        }

        /// <summary>
        /// Unable to gather dependencies information for package '{0}'
        /// </summary>
        internal static string FormatUnableToGatherDependencyInfo(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("UnableToGatherDependencyInfo"), p0);
        }

        /// <summary>
        /// Unable to resolve dependencies for package '{0}' with DependencyBehavior '{1}'
        /// </summary>
        internal static string UnableToResolveDependencyInfo
        {
            get { return GetString("UnableToResolveDependencyInfo"); }
        }

        /// <summary>
        /// Unable to resolve dependencies for package '{0}' with DependencyBehavior '{1}'
        /// </summary>
        internal static string FormatUnableToResolveDependencyInfo(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("UnableToResolveDependencyInfo"), p0, p1);
        }

        /// <summary>
        /// Unable to find package '{0}'
        /// </summary>
        internal static string UnknownPackage
        {
            get { return GetString("UnknownPackage"); }
        }

        /// <summary>
        /// Unable to find package '{0}'
        /// </summary>
        internal static string FormatUnknownPackage(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("UnknownPackage"), p0);
        }

        /// <summary>
        /// Unable to find version '{1}' of package '{0}'.
        /// </summary>
        internal static string UnknownPackageSpecificVersion
        {
            get { return GetString("UnknownPackageSpecificVersion"); }
        }

        /// <summary>
        /// Unable to find version '{1}' of package '{0}'.
        /// </summary>
        internal static string FormatUnknownPackageSpecificVersion(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("UnknownPackageSpecificVersion"), p0, p1);
        }

        /// <summary>
        /// Attempting to gather dependencies information for multiple packages with respect to project '{0}', targeting '{1}'
        /// </summary>
        internal static string AttemptingToGatherDependencyInfoForMultiplePackages
        {
            get { return GetString("AttemptingToGatherDependencyInfoForMultiplePackages"); }
        }

        /// <summary>
        /// Attempting to gather dependencies information for multiple packages with respect to project '{0}', targeting '{1}'
        /// </summary>
        internal static string FormatAttemptingToGatherDependencyInfoForMultiplePackages(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("AttemptingToGatherDependencyInfoForMultiplePackages"), p0, p1);
        }

        /// <summary>
        /// Attempting to resolve dependencies for multiple packages
        /// </summary>
        internal static string AttemptingToResolveDependenciesForMultiplePackages
        {
            get { return GetString("AttemptingToResolveDependenciesForMultiplePackages"); }
        }

        /// <summary>
        /// Attempting to resolve dependencies for multiple packages
        /// </summary>
        internal static string FormatAttemptingToResolveDependenciesForMultiplePackages()
        {
            return GetString("AttemptingToResolveDependenciesForMultiplePackages");
        }

        /// <summary>
        /// One or more packages not found
        /// </summary>
        internal static string OneOrMorePackagesNotFound
        {
            get { return GetString("OneOrMorePackagesNotFound"); }
        }

        /// <summary>
        /// One or more packages not found
        /// </summary>
        internal static string FormatOneOrMorePackagesNotFound()
        {
            return GetString("OneOrMorePackagesNotFound");
        }

        /// <summary>
        /// Resolving actions install multiple packages
        /// </summary>
        internal static string ResolvingActionsToInstallOrUpdateMultiplePackages
        {
            get { return GetString("ResolvingActionsToInstallOrUpdateMultiplePackages"); }
        }

        /// <summary>
        /// Resolving actions install multiple packages
        /// </summary>
        internal static string FormatResolvingActionsToInstallOrUpdateMultiplePackages()
        {
            return GetString("ResolvingActionsToInstallOrUpdateMultiplePackages");
        }

        /// <summary>
        /// Unable to gather dependencies information for multiple packages
        /// </summary>
        internal static string UnableToGatherDependencyInfoForMultiplePackages
        {
            get { return GetString("UnableToGatherDependencyInfoForMultiplePackages"); }
        }

        /// <summary>
        /// Unable to gather dependencies information for multiple packages
        /// </summary>
        internal static string FormatUnableToGatherDependencyInfoForMultiplePackages()
        {
            return GetString("UnableToGatherDependencyInfoForMultiplePackages");
        }

        /// <summary>
        /// Unable to resolve dependencies for multiple packages
        /// </summary>
        internal static string UnableToResolveDependencyInfoForMultiplePackages
        {
            get { return GetString("UnableToResolveDependencyInfoForMultiplePackages"); }
        }

        /// <summary>
        /// Unable to resolve dependencies for multiple packages
        /// </summary>
        internal static string FormatUnableToResolveDependencyInfoForMultiplePackages()
        {
            return GetString("UnableToResolveDependencyInfoForMultiplePackages");
        }

        /// <summary>
        /// The '{0}' package requires NuGet client version '{1}' or above, but the current NuGet version is '{2}'. To upgrade NuGet, please go to http://docs.nuget.org/consume/installing-nuget
        /// </summary>
        internal static string PackageMinVersionNotSatisfied
        {
            get { return GetString("PackageMinVersionNotSatisfied"); }
        }

        /// <summary>
        /// The '{0}' package requires NuGet client version '{1}' or above, but the current NuGet version is '{2}'. To upgrade NuGet, please go to http://docs.nuget.org/consume/installing-nuget
        /// </summary>
        internal static string FormatPackageMinVersionNotSatisfied(object p0, object p1, object p2)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("PackageMinVersionNotSatisfied"), p0, p1, p2);
        }

        /// <summary>
        /// Install failed. Rolling back...
        /// </summary>
        internal static string Warning_RollingBack
        {
            get { return GetString("Warning_RollingBack"); }
        }

        /// <summary>
        /// Install failed. Rolling back...
        /// </summary>
        internal static string FormatWarning_RollingBack()
        {
            return GetString("Warning_RollingBack");
        }

        /// <summary>
        /// Already referencing a newer version of '{0}'..
        /// </summary>
        internal static string NewerVersionAlreadyReferenced
        {
            get { return GetString("NewerVersionAlreadyReferenced"); }
        }

        /// <summary>
        /// Already referencing a newer version of '{0}'..
        /// </summary>
        internal static string FormatNewerVersionAlreadyReferenced(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("NewerVersionAlreadyReferenced"), p0);
        }

        /// <summary>
        /// Parameter cannot be zero or negative
        /// </summary>
        internal static string ParameterCannotBeZeroOrNegative
        {
            get { return GetString("ParameterCannotBeZeroOrNegative"); }
        }

        /// <summary>
        /// Parameter cannot be zero or negative
        /// </summary>
        internal static string FormatParameterCannotBeZeroOrNegative()
        {
            return GetString("ParameterCannotBeZeroOrNegative");
        }

        /// <summary>
        /// Unable to resolve '{0}'. An additional constraint '{1}' defined in {2} prevents this operation.
        /// </summary>
        internal static string PackagesConfigAllowedVersionConflict
        {
            get { return GetString("PackagesConfigAllowedVersionConflict"); }
        }

        /// <summary>
        /// Unable to resolve '{0}'. An additional constraint '{1}' defined in {2} prevents this operation.
        /// </summary>
        internal static string FormatPackagesConfigAllowedVersionConflict(object p0, object p1, object p2)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("PackagesConfigAllowedVersionConflict"), p0, p1, p2);
        }

        /// <summary>
        /// Package restore failed. Rolling back package changes for '{0}'.
        /// </summary>
        internal static string RestoreFailedRollingBack
        {
            get { return GetString("RestoreFailedRollingBack"); }
        }

        /// <summary>
        /// Package restore failed. Rolling back package changes for '{0}'.
        /// </summary>
        internal static string FormatRestoreFailedRollingBack(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("RestoreFailedRollingBack"), p0);
        }

        /// <summary>
        /// Cannot download packages from '{0}'.
        /// </summary>
        internal static string DownloadResourceNotFound
        {
            get { return GetString("DownloadResourceNotFound"); }
        }

        /// <summary>
        /// Cannot download packages from '{0}'.
        /// </summary>
        internal static string FormatDownloadResourceNotFound(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DownloadResourceNotFound"), p0);
        }

        /// <summary>
        /// Package stream for '{0}' cannot be found at '{1}'.
        /// </summary>
        internal static string DownloadStreamNotAvailable
        {
            get { return GetString("DownloadStreamNotAvailable"); }
        }

        /// <summary>
        /// Package stream for '{0}' cannot be found at '{1}'.
        /// </summary>
        internal static string FormatDownloadStreamNotAvailable(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DownloadStreamNotAvailable"), p0, p1);
        }

        /// <summary>
        /// Package restore completed successfully for '{0}'.
        /// </summary>
        internal static string BuildIntegratedPackageRestoreSucceeded
        {
            get { return GetString("BuildIntegratedPackageRestoreSucceeded"); }
        }

        /// <summary>
        /// Package restore completed successfully for '{0}'.
        /// </summary>
        internal static string FormatBuildIntegratedPackageRestoreSucceeded(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("BuildIntegratedPackageRestoreSucceeded"), p0);
        }

        /// <summary>
        /// Restoring packages for '{0}'.
        /// </summary>
        internal static string BuildIntegratedPackageRestoreStarted
        {
            get { return GetString("BuildIntegratedPackageRestoreStarted"); }
        }

        /// <summary>
        /// Restoring packages for '{0}'.
        /// </summary>
        internal static string FormatBuildIntegratedPackageRestoreStarted(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("BuildIntegratedPackageRestoreStarted"), p0);
        }

        /// <summary>
        /// Package restore failed for '{0}'.
        /// </summary>
        internal static string BuildIntegratedPackageRestoreFailed
        {
            get { return GetString("BuildIntegratedPackageRestoreFailed"); }
        }

        /// <summary>
        /// Package restore failed for '{0}'.
        /// </summary>
        internal static string FormatBuildIntegratedPackageRestoreFailed(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("BuildIntegratedPackageRestoreFailed"), p0);
        }

        /// <summary>
        /// Successfully installed '{0}' to {1}
        /// </summary>
        internal static string SuccessfullyInstalled
        {
            get { return GetString("SuccessfullyInstalled"); }
        }

        /// <summary>
        /// Successfully installed '{0}' to {1}
        /// </summary>
        internal static string FormatSuccessfullyInstalled(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("SuccessfullyInstalled"), p0, p1);
        }

        /// <summary>
        /// Successfully uninstalled '{0}' from {1}
        /// </summary>
        internal static string SuccessfullyUninstalled
        {
            get { return GetString("SuccessfullyUninstalled"); }
        }

        /// <summary>
        /// Successfully uninstalled '{0}' from {1}
        /// </summary>
        internal static string FormatSuccessfullyUninstalled(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("SuccessfullyUninstalled"), p0, p1);
        }

        /// <summary>
        /// Package '{0}' uses features that are not supported by the current version of NuGet. To upgrade NuGet, see http://docs.nuget.org/consume/installing-nuget.
        /// </summary>
        internal static string UnsupportedPackageFeature
        {
            get { return GetString("UnsupportedPackageFeature"); }
        }

        /// <summary>
        /// Package '{0}' uses features that are not supported by the current version of NuGet. To upgrade NuGet, see http://docs.nuget.org/consume/installing-nuget.
        /// </summary>
        internal static string FormatUnsupportedPackageFeature(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("UnsupportedPackageFeature"), p0);
        }

        /// <summary>
        /// Package '{0}' already exists in project '{1}'
        /// </summary>
        internal static string PackageAlreadyExistsInProject
        {
            get { return GetString("PackageAlreadyExistsInProject"); }
        }

        /// <summary>
        /// Package '{0}' already exists in project '{1}'
        /// </summary>
        internal static string FormatPackageAlreadyExistsInProject(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("PackageAlreadyExistsInProject"), p0, p1);
        }

        /// <summary>
        /// Package '{0}' does not exist in folder '{1}'
        /// </summary>
        internal static string PackageDoesNotExistInFolder
        {
            get { return GetString("PackageDoesNotExistInFolder"); }
        }

        /// <summary>
        /// Package '{0}' does not exist in folder '{1}'
        /// </summary>
        internal static string FormatPackageDoesNotExistInFolder(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("PackageDoesNotExistInFolder"), p0, p1);
        }

        /// <summary>
        /// Package '{0}' does not exist in project '{1}'
        /// </summary>
        internal static string PackageDoesNotExistInProject
        {
            get { return GetString("PackageDoesNotExistInProject"); }
        }

        /// <summary>
        /// Package '{0}' does not exist in project '{1}'
        /// </summary>
        internal static string FormatPackageDoesNotExistInProject(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("PackageDoesNotExistInProject"), p0, p1);
        }

        /// <summary>
        /// Package '{0}' does not exists in '{1}'
        /// </summary>
        internal static string PackageDoesNotExisttInPackagesConfig
        {
            get { return GetString("PackageDoesNotExisttInPackagesConfig"); }
        }

        /// <summary>
        /// Package '{0}' does not exists in '{1}'
        /// </summary>
        internal static string FormatPackageDoesNotExisttInPackagesConfig(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("PackageDoesNotExisttInPackagesConfig"), p0, p1);
        }

        /// <summary>
        /// Removed package '{0}' from folder '{1}'
        /// </summary>
        internal static string RemovedPackageFromFolder
        {
            get { return GetString("RemovedPackageFromFolder"); }
        }

        /// <summary>
        /// Removed package '{0}' from folder '{1}'
        /// </summary>
        internal static string FormatRemovedPackageFromFolder(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("RemovedPackageFromFolder"), p0, p1);
        }

        /// <summary>
        /// Removing package '{0}' from folder '{1}'
        /// </summary>
        internal static string RemovingPackageFromFolder
        {
            get { return GetString("RemovingPackageFromFolder"); }
        }

        /// <summary>
        /// Removing package '{0}' from folder '{1}'
        /// </summary>
        internal static string FormatRemovingPackageFromFolder(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("RemovingPackageFromFolder"), p0, p1);
        }

        /// <summary>
        /// Argument cannot be null or empty
        /// </summary>
        internal static string Argument_Cannot_Be_Null_Or_Empty
        {
            get { return GetString("Argument_Cannot_Be_Null_Or_Empty"); }
        }

        /// <summary>
        /// Argument cannot be null or empty
        /// </summary>
        internal static string FormatArgument_Cannot_Be_Null_Or_Empty()
        {
            return GetString("Argument_Cannot_Be_Null_Or_Empty");
        }

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);

            System.Diagnostics.Debug.Assert(value != null);

            if (formatterNames != null)
            {
                for (var i = 0; i < formatterNames.Length; i++)
                {
                    value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
                }
            }

            return value;
        }
    }
}
