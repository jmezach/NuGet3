// <auto-generated />
namespace NuGet.ProjectManagement
{
    using System.Globalization;
    using System.Reflection;
    using System.Resources;

    internal static class Strings
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("ProjectManagement.Strings", typeof(Strings).GetTypeInfo().Assembly);

        /// <summary>
        /// Added package '{0}' to folder '{1}'
        /// </summary>
        internal static string AddedPackageToFolder
        {
            get { return GetString("AddedPackageToFolder"); }
        }

        /// <summary>
        /// Added package '{0}' to folder '{1}'
        /// </summary>
        internal static string FormatAddedPackageToFolder(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("AddedPackageToFolder"), p0, p1);
        }

        /// <summary>
        /// Added package '{0}' to project '{1}'
        /// </summary>
        internal static string AddedPackageToMSBuildProject
        {
            get { return GetString("AddedPackageToMSBuildProject"); }
        }

        /// <summary>
        /// Added package '{0}' to project '{1}'
        /// </summary>
        internal static string FormatAddedPackageToMSBuildProject(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("AddedPackageToMSBuildProject"), p0, p1);
        }

        /// <summary>
        /// Added package '{0}' to '{1}'
        /// </summary>
        internal static string AddedPackageToPackagesConfig
        {
            get { return GetString("AddedPackageToPackagesConfig"); }
        }

        /// <summary>
        /// Added package '{0}' to '{1}'
        /// </summary>
        internal static string FormatAddedPackageToPackagesConfig(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("AddedPackageToPackagesConfig"), p0, p1);
        }

        /// <summary>
        /// Adding package '{0}' to folder '{1}'
        /// </summary>
        internal static string AddingPackageToFolder
        {
            get { return GetString("AddingPackageToFolder"); }
        }

        /// <summary>
        /// Adding package '{0}' to folder '{1}'
        /// </summary>
        internal static string FormatAddingPackageToFolder(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("AddingPackageToFolder"), p0, p1);
        }

        /// <summary>
        /// Adding package '{0}' to project '{1}'
        /// </summary>
        internal static string AddingPackageToMSBuildProject
        {
            get { return GetString("AddingPackageToMSBuildProject"); }
        }

        /// <summary>
        /// Adding package '{0}' to project '{1}'
        /// </summary>
        internal static string FormatAddingPackageToMSBuildProject(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("AddingPackageToMSBuildProject"), p0, p1);
        }

        /// <summary>
        /// Adding package '{0}', which only has dependencies, to project '{1}'.
        /// </summary>
        internal static string AddingPackageWithOnlyDependencies
        {
            get { return GetString("AddingPackageWithOnlyDependencies"); }
        }

        /// <summary>
        /// Adding package '{0}', which only has dependencies, to project '{1}'.
        /// </summary>
        internal static string FormatAddingPackageWithOnlyDependencies(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("AddingPackageWithOnlyDependencies"), p0, p1);
        }

        /// <summary>
        /// Adding package '{0}', which only has tools group, to project '{1}'
        /// </summary>
        internal static string AddingPackageWithOnlyToolsGroup
        {
            get { return GetString("AddingPackageWithOnlyToolsGroup"); }
        }

        /// <summary>
        /// Adding package '{0}', which only has tools group, to project '{1}'
        /// </summary>
        internal static string FormatAddingPackageWithOnlyToolsGroup(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("AddingPackageWithOnlyToolsGroup"), p0, p1);
        }

        /// <summary>
        /// Argument cannot be null or empty
        /// </summary>
        internal static string Argument_Cannot_Be_Null_Or_Empty
        {
            get { return GetString("Argument_Cannot_Be_Null_Or_Empty"); }
        }

        /// <summary>
        /// Argument cannot be null or empty
        /// </summary>
        internal static string FormatArgument_Cannot_Be_Null_Or_Empty()
        {
            return GetString("Argument_Cannot_Be_Null_Or_Empty");
        }

        /// <summary>
        /// Value must be greater than or equal to {0}
        /// </summary>
        internal static string Argument_Must_Be_GreaterThanOrEqualTo
        {
            get { return GetString("Argument_Must_Be_GreaterThanOrEqualTo"); }
        }

        /// <summary>
        /// Value must be greater than or equal to {0}
        /// </summary>
        internal static string FormatArgument_Must_Be_GreaterThanOrEqualTo(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("Argument_Must_Be_GreaterThanOrEqualTo"), p0);
        }

        /// <summary>
        /// Content files should not be target framework specific, whereas, '{0}' is
        /// </summary>
        internal static string ContentFilesShouldNotBeTargetFrameworkSpecific
        {
            get { return GetString("ContentFilesShouldNotBeTargetFrameworkSpecific"); }
        }

        /// <summary>
        /// Content files should not be target framework specific, whereas, '{0}' is
        /// </summary>
        internal static string FormatContentFilesShouldNotBeTargetFrameworkSpecific(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ContentFilesShouldNotBeTargetFrameworkSpecific"), p0);
        }

        /// <summary>
        /// Added file '{0}'.
        /// </summary>
        internal static string Debug_AddedFile
        {
            get { return GetString("Debug_AddedFile"); }
        }

        /// <summary>
        /// Added file '{0}'.
        /// </summary>
        internal static string FormatDebug_AddedFile(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("Debug_AddedFile"), p0);
        }

        /// <summary>
        /// Added file '{0}' to folder '{1}'.
        /// </summary>
        internal static string Debug_AddedFileToFolder
        {
            get { return GetString("Debug_AddedFileToFolder"); }
        }

        /// <summary>
        /// Added file '{0}' to folder '{1}'.
        /// </summary>
        internal static string FormatDebug_AddedFileToFolder(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("Debug_AddedFileToFolder"), p0, p1);
        }

        /// <summary>
        /// Removed file '{0}'.
        /// </summary>
        internal static string Debug_RemovedFile
        {
            get { return GetString("Debug_RemovedFile"); }
        }

        /// <summary>
        /// Removed file '{0}'.
        /// </summary>
        internal static string FormatDebug_RemovedFile(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("Debug_RemovedFile"), p0);
        }

        /// <summary>
        /// Removed file '{0}' from folder '{1}'.
        /// </summary>
        internal static string Debug_RemovedFileFromFolder
        {
            get { return GetString("Debug_RemovedFileFromFolder"); }
        }

        /// <summary>
        /// Removed file '{0}' from folder '{1}'.
        /// </summary>
        internal static string FormatDebug_RemovedFileFromFolder(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("Debug_RemovedFileFromFolder"), p0, p1);
        }

        /// <summary>
        /// Removed folder '{0}'.
        /// </summary>
        internal static string Debug_RemovedFolder
        {
            get { return GetString("Debug_RemovedFolder"); }
        }

        /// <summary>
        /// Removed folder '{0}'.
        /// </summary>
        internal static string FormatDebug_RemovedFolder(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("Debug_RemovedFolder"), p0);
        }

        /// <summary>
        /// &gt;&gt; {0} are being added from '{1}'{2}
        /// </summary>
        internal static string Debug_TargetFrameworkInfo
        {
            get { return GetString("Debug_TargetFrameworkInfo"); }
        }

        /// <summary>
        /// &gt;&gt; {0} are being added from '{1}'{2}
        /// </summary>
        internal static string FormatDebug_TargetFrameworkInfo(object p0, object p1, object p2)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("Debug_TargetFrameworkInfo"), p0, p1, p2);
        }

        /// <summary>
        /// For adding package '{0}' to project '{1}' that targets '{2}'.
        /// </summary>
        internal static string Debug_TargetFrameworkInfoPrefix
        {
            get { return GetString("Debug_TargetFrameworkInfoPrefix"); }
        }

        /// <summary>
        /// For adding package '{0}' to project '{1}' that targets '{2}'.
        /// </summary>
        internal static string FormatDebug_TargetFrameworkInfoPrefix(object p0, object p1, object p2)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("Debug_TargetFrameworkInfoPrefix"), p0, p1, p2);
        }

        /// <summary>
        /// Assembly references
        /// </summary>
        internal static string Debug_TargetFrameworkInfo_AssemblyReferences
        {
            get { return GetString("Debug_TargetFrameworkInfo_AssemblyReferences"); }
        }

        /// <summary>
        /// Assembly references
        /// </summary>
        internal static string FormatDebug_TargetFrameworkInfo_AssemblyReferences()
        {
            return GetString("Debug_TargetFrameworkInfo_AssemblyReferences");
        }

        /// <summary>
        /// Build files
        /// </summary>
        internal static string Debug_TargetFrameworkInfo_BuildFiles
        {
            get { return GetString("Debug_TargetFrameworkInfo_BuildFiles"); }
        }

        /// <summary>
        /// Build files
        /// </summary>
        internal static string FormatDebug_TargetFrameworkInfo_BuildFiles()
        {
            return GetString("Debug_TargetFrameworkInfo_BuildFiles");
        }

        /// <summary>
        /// Content files
        /// </summary>
        internal static string Debug_TargetFrameworkInfo_ContentFiles
        {
            get { return GetString("Debug_TargetFrameworkInfo_ContentFiles"); }
        }

        /// <summary>
        /// Content files
        /// </summary>
        internal static string FormatDebug_TargetFrameworkInfo_ContentFiles()
        {
            return GetString("Debug_TargetFrameworkInfo_ContentFiles");
        }

        /// <summary>
        /// (not framework-specific)
        /// </summary>
        internal static string Debug_TargetFrameworkInfo_NotFrameworkSpecific
        {
            get { return GetString("Debug_TargetFrameworkInfo_NotFrameworkSpecific"); }
        }

        /// <summary>
        /// (not framework-specific)
        /// </summary>
        internal static string FormatDebug_TargetFrameworkInfo_NotFrameworkSpecific()
        {
            return GetString("Debug_TargetFrameworkInfo_NotFrameworkSpecific");
        }

        /// <summary>
        /// &gt;&gt; PowerShell scripts are being executed from '{0}'{1}
        /// </summary>
        internal static string Debug_TargetFrameworkInfo_PowershellScripts
        {
            get { return GetString("Debug_TargetFrameworkInfo_PowershellScripts"); }
        }

        /// <summary>
        /// &gt;&gt; PowerShell scripts are being executed from '{0}'{1}
        /// </summary>
        internal static string FormatDebug_TargetFrameworkInfo_PowershellScripts(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("Debug_TargetFrameworkInfo_PowershellScripts"), p0, p1);
        }

        /// <summary>
        /// Dependency '{0}' has invalid version specification.
        /// </summary>
        internal static string DependencyDoesNotHaveValidVersion
        {
            get { return GetString("DependencyDoesNotHaveValidVersion"); }
        }

        /// <summary>
        /// Dependency '{0}' has invalid version specification.
        /// </summary>
        internal static string FormatDependencyDoesNotHaveValidVersion(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DependencyDoesNotHaveValidVersion"), p0);
        }

        /// <summary>
        /// An error occurred while reading file '{0}': {1}
        /// </summary>
        internal static string ErrorLoadingPackagesConfig
        {
            get { return GetString("ErrorLoadingPackagesConfig"); }
        }

        /// <summary>
        /// An error occurred while reading file '{0}': {1}
        /// </summary>
        internal static string FormatErrorLoadingPackagesConfig(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ErrorLoadingPackagesConfig"), p0, p1);
        }

        /// <summary>
        /// File '{0}' already exists in project '{1}'. Do you want to overwrite it?
        /// </summary>
        internal static string FileConflictMessage
        {
            get { return GetString("FileConflictMessage"); }
        }

        /// <summary>
        /// File '{0}' already exists in project '{1}'. Do you want to overwrite it?
        /// </summary>
        internal static string FormatFileConflictMessage(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("FileConflictMessage"), p0, p1);
        }

        /// <summary>
        /// Overwriting existing file '{0}'..
        /// </summary>
        internal static string Info_OverwritingExistingFile
        {
            get { return GetString("Info_OverwritingExistingFile"); }
        }

        /// <summary>
        /// Overwriting existing file '{0}'..
        /// </summary>
        internal static string FormatInfo_OverwritingExistingFile(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("Info_OverwritingExistingFile"), p0);
        }

        /// <summary>
        /// Invalid!! Could not find a folder under artifact type '{0}', so cannot request for artifacts specific to target framework '{1}'
        /// </summary>
        internal static string NoFolderSpecificToTargetFxFound
        {
            get { return GetString("NoFolderSpecificToTargetFxFound"); }
        }

        /// <summary>
        /// Invalid!! Could not find a folder under artifact type '{0}', so cannot request for artifacts specific to target framework '{1}'
        /// </summary>
        internal static string FormatNoFolderSpecificToTargetFxFound(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("NoFolderSpecificToTargetFxFound"), p0, p1);
        }

        /// <summary>
        /// Package '{0}' already exists in folder '{1}'
        /// </summary>
        internal static string PackageAlreadyExistsInFolder
        {
            get { return GetString("PackageAlreadyExistsInFolder"); }
        }

        /// <summary>
        /// Package '{0}' already exists in folder '{1}'
        /// </summary>
        internal static string FormatPackageAlreadyExistsInFolder(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("PackageAlreadyExistsInFolder"), p0, p1);
        }

        /// <summary>
        /// Package '{0}' already exists in '{1}'
        /// </summary>
        internal static string PackageAlreadyExistsInPackagesConfig
        {
            get { return GetString("PackageAlreadyExistsInPackagesConfig"); }
        }

        /// <summary>
        /// Package '{0}' already exists in '{1}'
        /// </summary>
        internal static string FormatPackageAlreadyExistsInPackagesConfig(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("PackageAlreadyExistsInPackagesConfig"), p0, p1);
        }

        /// <summary>
        /// Package '{0}' already exists in project '{1}'
        /// </summary>
        internal static string PackageAlreadyExistsInProject
        {
            get { return GetString("PackageAlreadyExistsInProject"); }
        }

        /// <summary>
        /// Package '{0}' already exists in project '{1}'
        /// </summary>
        internal static string FormatPackageAlreadyExistsInProject(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("PackageAlreadyExistsInProject"), p0, p1);
        }

        /// <summary>
        /// Package '{0}' does not exist in folder '{1}'
        /// </summary>
        internal static string PackageDoesNotExistInFolder
        {
            get { return GetString("PackageDoesNotExistInFolder"); }
        }

        /// <summary>
        /// Package '{0}' does not exist in folder '{1}'
        /// </summary>
        internal static string FormatPackageDoesNotExistInFolder(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("PackageDoesNotExistInFolder"), p0, p1);
        }

        /// <summary>
        /// Package '{0}' does not exist in project '{1}'
        /// </summary>
        internal static string PackageDoesNotExistInProject
        {
            get { return GetString("PackageDoesNotExistInProject"); }
        }

        /// <summary>
        /// Package '{0}' does not exist in project '{1}'
        /// </summary>
        internal static string FormatPackageDoesNotExistInProject(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("PackageDoesNotExistInProject"), p0, p1);
        }

        /// <summary>
        /// Package '{0}' does not exists in '{1}'
        /// </summary>
        internal static string PackageDoesNotExisttInPackagesConfig
        {
            get { return GetString("PackageDoesNotExisttInPackagesConfig"); }
        }

        /// <summary>
        /// Package '{0}' does not exists in '{1}'
        /// </summary>
        internal static string FormatPackageDoesNotExisttInPackagesConfig(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("PackageDoesNotExisttInPackagesConfig"), p0, p1);
        }

        /// <summary>
        /// Package stream should be seekable
        /// </summary>
        internal static string PackageStreamShouldBeSeekable
        {
            get { return GetString("PackageStreamShouldBeSeekable"); }
        }

        /// <summary>
        /// Package stream should be seekable
        /// </summary>
        internal static string FormatPackageStreamShouldBeSeekable()
        {
            return GetString("PackageStreamShouldBeSeekable");
        }

        /// <summary>
        /// Removed package '{0}' from folder '{1}'
        /// </summary>
        internal static string RemovedPackageFromFolder
        {
            get { return GetString("RemovedPackageFromFolder"); }
        }

        /// <summary>
        /// Removed package '{0}' from folder '{1}'
        /// </summary>
        internal static string FormatRemovedPackageFromFolder(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("RemovedPackageFromFolder"), p0, p1);
        }

        /// <summary>
        /// Removed package '{0}' from project '{1}'
        /// </summary>
        internal static string RemovedPackageFromMSBuildProject
        {
            get { return GetString("RemovedPackageFromMSBuildProject"); }
        }

        /// <summary>
        /// Removed package '{0}' from project '{1}'
        /// </summary>
        internal static string FormatRemovedPackageFromMSBuildProject(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("RemovedPackageFromMSBuildProject"), p0, p1);
        }

        /// <summary>
        /// Removed package '{0}' from '{1}'
        /// </summary>
        internal static string RemovedPackageFromPackagesConfig
        {
            get { return GetString("RemovedPackageFromPackagesConfig"); }
        }

        /// <summary>
        /// Removed package '{0}' from '{1}'
        /// </summary>
        internal static string FormatRemovedPackageFromPackagesConfig(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("RemovedPackageFromPackagesConfig"), p0, p1);
        }

        /// <summary>
        /// Removing package '{0}' from folder '{1}'
        /// </summary>
        internal static string RemovingPackageFromFolder
        {
            get { return GetString("RemovingPackageFromFolder"); }
        }

        /// <summary>
        /// Removing package '{0}' from folder '{1}'
        /// </summary>
        internal static string FormatRemovingPackageFromFolder(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("RemovingPackageFromFolder"), p0, p1);
        }

        /// <summary>
        /// Removing package '{0}' from project '{1}'
        /// </summary>
        internal static string RemovingPackageFromMSBuildProject
        {
            get { return GetString("RemovingPackageFromMSBuildProject"); }
        }

        /// <summary>
        /// Removing package '{0}' from project '{1}'
        /// </summary>
        internal static string FormatRemovingPackageFromMSBuildProject(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("RemovingPackageFromMSBuildProject"), p0, p1);
        }

        /// <summary>
        /// The replacement token '{0}' has no value
        /// </summary>
        internal static string TokenHasNoValue
        {
            get { return GetString("TokenHasNoValue"); }
        }

        /// <summary>
        /// The replacement token '{0}' has no value
        /// </summary>
        internal static string FormatTokenHasNoValue(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("TokenHasNoValue"), p0);
        }

        /// <summary>
        /// Could not install package '{0}'. You are trying to install this package into a project that targets '{1}', but the package does not contain any assembly references or content files that are compatible with that framework. For more information, contact the package author.
        /// </summary>
        internal static string UnableToFindCompatibleItems
        {
            get { return GetString("UnableToFindCompatibleItems"); }
        }

        /// <summary>
        /// Could not install package '{0}'. You are trying to install this package into a project that targets '{1}', but the package does not contain any assembly references or content files that are compatible with that framework. For more information, contact the package author.
        /// </summary>
        internal static string FormatUnableToFindCompatibleItems(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("UnableToFindCompatibleItems"), p0, p1);
        }

        /// <summary>
        /// Directory '{0}' is not empty. Skipping...
        /// </summary>
        internal static string Warning_DirectoryNotEmpty
        {
            get { return GetString("Warning_DirectoryNotEmpty"); }
        }

        /// <summary>
        /// Directory '{0}' is not empty. Skipping...
        /// </summary>
        internal static string FormatWarning_DirectoryNotEmpty(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("Warning_DirectoryNotEmpty"), p0);
        }

        /// <summary>
        /// '{0}' already exists. Skipping...
        /// </summary>
        internal static string Warning_FileAlreadyExists
        {
            get { return GetString("Warning_FileAlreadyExists"); }
        }

        /// <summary>
        /// '{0}' already exists. Skipping...
        /// </summary>
        internal static string FormatWarning_FileAlreadyExists(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("Warning_FileAlreadyExists"), p0);
        }

        /// <summary>
        /// Skipping '{0}' because it was modified.
        /// </summary>
        internal static string Warning_FileModified
        {
            get { return GetString("Warning_FileModified"); }
        }

        /// <summary>
        /// Skipping '{0}' because it was modified.
        /// </summary>
        internal static string FormatWarning_FileModified(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("Warning_FileModified"), p0);
        }

        /// <summary>
        /// An error occurred while applying transformation to '{0}' in project '{1}'
        /// </summary>
        internal static string XdtError
        {
            get { return GetString("XdtError"); }
        }

        /// <summary>
        /// An error occurred while applying transformation to '{0}' in project '{1}'
        /// </summary>
        internal static string FormatXdtError(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("XdtError"), p0, p1);
        }

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);

            System.Diagnostics.Debug.Assert(value != null);

            if (formatterNames != null)
            {
                for (var i = 0; i < formatterNames.Length; i++)
                {
                    value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
                }
            }

            return value;
        }
    }
}
